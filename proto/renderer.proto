syntax = "proto3";

package gpr5300.pb;

message Color4
{
    float r = 1;
    float g = 2;
    float b = 3;
    float a = 4;
}

message FrameBuffer
{

}

enum TextureType
{
	NONE = 0;
	AMBIENT = 1;
	DIFFUSE = 2;
	SPECULAR = 3;
	SPECULAR_HIGHLIGHT = 4;
	BUMP = 5;
	DISPLACEMENT = 6;
	ALPHA = 7;
	REFLECTION = 8;
	ROUGHNESS = 9;
	METALLIC = 10;
	SHEEN = 11;
	EMISSIVE = 12;
	NORMAL = 13;
	AO = 14;
}

message Sampler
{
    string name = 1;
    TextureType type = 2;
}

message Attribute
{
    enum Type
    {
        FLOAT = 0;
        VEC2 = 1;
        VEC3 = 2;
        VEC4 = 3;
        MAT2 = 4;
        MAT3 = 5;
        MAT4 = 6;
        INT = 7;
        IVEC2 = 8;
        IVEC3 = 9;
        IVEC4 = 10;
        BOOL = 11;
        SAMPLER2D = 12;
        SAMPLERCUBE = 13;
        VOID = 14;
        CUSTOM = 15;
    }
    string name = 1;
    Type type = 2;
    string type_name = 3;
}

message Shader
{
    enum Type
    {
        VERTEX = 0;
        FRAGMENT = 1;
        COMPUTE = 2;
    }
    string path = 1;
    Type type = 2;
    repeated Attribute in_attributes = 3;
    repeated Attribute out_attributes = 4;
    repeated Attribute uniforms = 5;
}

message Pipeline
{
    enum Type
    {
        RASTERIZE = 0;
        COMPUTE = 1;
    }
    Type type = 1;
    int32 vertex_shader_index = 2;
    int32 fragment_shader_index = 3;
    int32 compute_shader_index = 4;
    int32 geometry_shader_index = 5;
    repeated Attribute in_vertex_attributes = 6;
    repeated Attribute uniforms = 7;
    bool depth_test_enable = 12;
    enum DepthCompareOp
    {
        LESS = 0;
        LESS_OR_EQUAL = 1;
        EQUAL = 2;
        GREATER = 3;
        NOT_EQUAL = 4;
        GREATER_OR_EQUAL = 5;
        ALWAYS = 6;
        NEVER = 7;
    }
    DepthCompareOp depth_compare_op = 13;
    bool depth_mask = 14;


    string vertex_shader_path = 8;// Used by the editor
    string fragment_shader_path = 9;// Used by the editor
    string compute_shader_path = 10;// Used by the editor
    string geometry_shader_path = 11;// Used by the editor
}

message Texture
{
    enum WrappingMode
    {
        REPEAT = 0;
        MIRROR_REPEAT = 1;
        CLAMP_TO_EDGE = 2;
        CLAMP_TO_BORDER = 3;
    }
    enum FilteringMode
    {
        NEAREST = 0;
        LINEAR = 1;
    }

    string path = 1;
    WrappingMode wrapping_mode = 2;
    FilteringMode filter_mode = 3;
    bool generate_mipmaps = 4;
    TextureType type = 5;
}

message MaterialTexture
{
    string sampler_name = 1;
    int32 texture_index = 2;
    //Used only by editor
    string texture_name = 3;
}

message Material
{
    repeated MaterialTexture textures = 1;
    int32 pipeline_index = 2;
    repeated Attribute in_vertex_attributes = 3;
    repeated Attribute uniforms = 4;
    string pipeline_path = 5; //used for the editor
}

message Mesh
{
    enum PrimitveType
    {
        QUAD = 0;
        CUBE = 1;
        SPHERE = 2;
        MODEL = 3;
        NONE = 4;
    }
    PrimitveType primitve_type = 1;
}

message ModelMesh
{
    string mesh_name = 1;
    string mesh_path = 2;
    string material_name = 3;
}

message ModelMaterial
{
    string material_name = 1;
    string material_path = 2;
    repeated int32 texture_indices = 3;
}

message ModelTexture
{
    string texture_path = 1;
    TextureType type = 2;
}

message Model
{
    repeated ModelMesh meshes = 1;
    repeated ModelMaterial materials = 2;
    repeated ModelTexture textures = 3;
    string model_path = 4; //the actual obj path
}

message DrawCommand
{
    enum Mode
    {
        TRIANGLES = 0;
    }
    int32 material_index = 1;
    Mode mode = 2;
    int32 count = 4;
    int32 mesh_index = 5;
    bool draw_elements = 6;
    bool automatic_draw = 9;
    //for the editor
    string material_path = 7;
    string mesh_path = 8;
}

message SubPass
{
    Color4 clear_color = 1;
    repeated DrawCommand commands = 2;
    //Used by editor
    repeated string command_paths = 3;
}

message RenderPass
{
    repeated SubPass sub_passes = 1;
}

message PySystem
{
    string module = 1;
    string class = 2;
    string path = 3;
}

message Scene
{
    string name = 1;
    repeated Shader shaders = 2;
    repeated Pipeline pipelines = 3;
    RenderPass render_pass = 4;
    repeated Mesh meshes = 5;
    repeated Texture textures = 6;
    repeated Material materials = 7;
    repeated PySystem py_systems = 8;
    repeated Model models = 11;

    //used by editor
    string render_pass_path = 9;
    repeated string py_system_paths = 10;
}