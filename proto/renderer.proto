syntax = "proto3";

package gpr5300.pb;
import "proto/vector.proto";

message Color4
{
    float r = 1;
    float g = 2;
    float b = 3;
    float a = 4;
}

message RenderTarget
{
    enum Format
    {
        RED = 0;
        RG = 2;
        RGB = 4;
        RGBA = 6;
        DEPTH_COMP = 8;
        DEPTH_STENCIL = 9;
        LUMINANCE_ALPHA =  10;
        ALPHA = 11;
    }

    enum FormatSize
    {
        SIZE_8 = 0;
        SIZE_16 = 1;
        SIZE_24 = 2;
        SIZE_32 = 3;
    }

    enum Type
    {
        UNSIGNED = 0;
        INT = 1;
        FLOAT = 2;
    }

    enum Size
    {
        WINDOW_SIZE = 0; //This will require to recreate the framebuffer when resizing window
        FIXED_SIZE = 1;
    }

    Format format = 1;
    bool rbo = 2;
    Size size_type = 3;
    Vec2i target_size = 4;
    FormatSize format_size = 5;
    bool snorm = 6;
    Type type = 7;
}

message FrameBuffer
{
    repeated RenderTarget color_attachments = 1;
    RenderTarget depth_stencil_attachment = 2;
}

enum TextureType
{
	NONE = 0;
	AMBIENT = 1;
	DIFFUSE = 2;
	SPECULAR = 3;
	SPECULAR_HIGHLIGHT = 4;
	BUMP = 5;
	DISPLACEMENT = 6;
	ALPHA = 7;
	REFLECTION = 8;
	ROUGHNESS = 9;
	METALLIC = 10;
	SHEEN = 11;
	EMISSIVE = 12;
	NORMAL = 13;
	AO = 14;
}

message Sampler
{
    string name = 1;
    TextureType type = 2;
}

message Attribute
{
    enum Type
    {
        FLOAT = 0;
        VEC2 = 1;
        VEC3 = 2;
        VEC4 = 3;
        MAT2 = 4;
        MAT3 = 5;
        MAT4 = 6;
        INT = 7;
        IVEC2 = 8;
        IVEC3 = 9;
        IVEC4 = 10;
        BOOL = 11;
        SAMPLER2D = 12;
        SAMPLERCUBE = 13;
        VOID = 14;
        CUSTOM = 15;
    }
    string name = 1;
    Type type = 2;
    string type_name = 3;
}

message Shader
{
    enum Type
    {
        VERTEX = 0;
        FRAGMENT = 1;
        COMPUTE = 2;
    }
    string path = 1;
    Type type = 2;
    repeated Attribute in_attributes = 3;
    repeated Attribute out_attributes = 4;
    repeated Attribute uniforms = 5;
}

message Pipeline
{
    enum Type
    {
        RASTERIZE = 0;
        COMPUTE = 1;
    }
    Type type = 1;
    int32 vertex_shader_index = 2;
    int32 fragment_shader_index = 3;
    int32 compute_shader_index = 4;
    int32 geometry_shader_index = 5;
    repeated Attribute in_vertex_attributes = 6;
    repeated Attribute uniforms = 7;
    bool depth_test_enable = 12;
    enum DepthCompareOp
    {
        LESS = 0;
        LESS_OR_EQUAL = 1;
        EQUAL = 2;
        GREATER = 3;
        NOT_EQUAL = 4;
        GREATER_OR_EQUAL = 5;
        ALWAYS = 6;
        NEVER = 7;
    }
    DepthCompareOp depth_compare_op = 13;
    bool depth_mask = 14;
    repeated Sampler samplers = 15;
    bool blend_enable = 16;
    enum BlendFunc
    {
        BLEND_ZERO = 0;
        ONE = 1;
        SRC_COLOR = 2;
        ONE_MINUS_SRC_COLOR = 3;
        DST_COLOR = 4;
        ONE_MINUS_DST_COLOR = 5;
        SRC_ALPHA = 6;
        ONE_MINUS_SRC_ALPHA = 7;
        DST_ALPHA = 8;
        ONE_MINUS_DST_ALPHA = 9;
        CONSTANT_COLOR = 10;
        ONE_MINUS_CONSTANT_COLOR = 11;
        CONSTANT_ALPHA = 12;
        ONE_MINUS_CONSTANT_ALPHA = 13;
        SRC_ALPHA_SATURATE = 14;
        SRC1_COLOR = 15;
        ONE_MINUS_SRC1_COLOR = 16;
        SRC1_ALPHA = 17;
        ONE_MINUS_SRC1_ALPHA = 18;
    }
    BlendFunc blending_source_factor = 17;
    BlendFunc blending_destination_factor = 18;

    bool enable_stencil_test = 19;
    enum StencilOp
    {
        KEEP = 0;
        STENCIL_ZERO = 1;
        REPLACE = 2;
        INCR = 3;
        INCR_WRAP = 4;
        DECR = 5;
        DECR_WRAP = 6;
        INVERT = 7;
    }
    StencilOp stencil_source_fail = 20;
    StencilOp stencil_depth_fail = 21;
    StencilOp stencil_depth_pass = 22;

    enum StencilFunc
    {
        STENCIL_NEVER = 0;
        STENCIL_LESS = 1;
        STENCIL_LEQUAL = 2;
        STENCIL_GREATER = 3;
        STENCIL_GEQUAL = 4;
        STENCIL_EQUAL = 5;
        STENCIL_NOTEQUAL = 6;
        STENCIL_ALWAYS = 7;
    }
    StencilFunc stencil_func = 23;
    int32 stencil_ref = 24;
    uint32 stencil_func_mask = 25;
    uint32 stencil_mask = 26;

    bool enable_culling = 27;
    enum CullFace
    {
        BACK = 0;
        FRONT = 1;
        FRONT_AND_BACK = 2;
    }
    CullFace cull_face = 28;
    enum FrontFace
    {
        COUNTER_CLOCKWISE = 0;
        CLOCKWISE = 1;
    }
    FrontFace front_face = 29;

    string vertex_shader_path = 8;// Used by the editor
    string fragment_shader_path = 9;// Used by the editor
    string compute_shader_path = 10;// Used by the editor
    string geometry_shader_path = 11;// Used by the editor
}

message Texture
{
    enum WrappingMode
    {
        REPEAT = 0;
        MIRROR_REPEAT = 1;
        CLAMP_TO_EDGE = 2;
        CLAMP_TO_BORDER = 3;
    }
    enum FilteringMode
    {
        NEAREST = 0;
        LINEAR = 1;
    }

    string path = 1;
    WrappingMode wrapping_mode = 2;
    FilteringMode filter_mode = 3;
    bool generate_mipmaps = 4;
    TextureType type = 5;
}

message MaterialTexture
{
    string sampler_name = 1;
    int32 texture_index = 2;
    //Used only by editor
    string texture_name = 3;
    TextureType texture_type = 4;
}

message Material
{
    repeated MaterialTexture textures = 1;
    int32 pipeline_index = 2;
    repeated Attribute in_vertex_attributes = 3;
    repeated Attribute uniforms = 4;
    string pipeline_path = 5; //used for the editor
}

message Mesh
{
    enum PrimitveType
    {
        QUAD = 0;
        CUBE = 1;
        SPHERE = 2;
        MODEL = 3;
        NONE = 4;
    }
    PrimitveType primitve_type = 1;
    string model_path = 2; //used by editor
    string mesh_name = 3;
    int32 model_index = 4;
}

message ModelMesh
{
    string mesh_name = 1;
    string mesh_path = 2;
    string material_name = 3;
}

message ModelMaterial
{
    string material_name = 1;
    string material_path = 2;
    repeated int32 texture_indices = 3;
}

message ModelTexture
{
    string texture_path = 1;
    TextureType type = 2;
}

message ModelDrawCommand
{
	repeated string material_paths = 1;
	repeated string draw_command_paths = 2;
	string pipeline_path = 3;
}

message Model
{
	repeated ModelMesh meshes = 1;
	repeated ModelMaterial materials = 2;
	repeated ModelTexture textures = 3;
	string model_path = 4; //the actual obj path
    repeated ModelDrawCommand draw_commands = 5; // used by the editor
    repeated string mtl_paths = 6;
}

message SceneModel
{
    string path = 1;
}

message DrawCommand
{
    enum Mode
    {
        TRIANGLES = 0;
    }
    int32 material_index = 1;
    Mode mode = 2;
    int32 count = 4;
    int32 mesh_index = 5;
    bool draw_elements = 6;
    bool automatic_draw = 9;
    //for the editor
    string material_path = 7;
    string mesh_path = 8;
}


message SubPass
{
    Color4 clear_color = 1;
    repeated DrawCommand commands = 2;
    //Used by editor
    repeated string command_paths = 3;
    FrameBuffer framebuffer = 4;
}

message RenderPass
{
    repeated SubPass sub_passes = 1;
}

message PySystem
{
    string module = 1;
    string class = 2;
    string path = 3;
}

message Scene
{
    string name = 1;
    repeated Shader shaders = 2;
    repeated Pipeline pipelines = 3;
    RenderPass render_pass = 4;
    repeated Mesh meshes = 5;
    repeated Texture textures = 6;
    repeated Material materials = 7;
    repeated PySystem py_systems = 8;
    repeated string model_paths = 11;

    //used by editor
    string render_pass_path = 9;
    repeated string py_system_paths = 10;
}